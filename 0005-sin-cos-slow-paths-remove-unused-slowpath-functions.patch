From f75119a070079e1cd710922f441d90b63461ae87 Mon Sep 17 00:00:00 2001
From: Wilco Dijkstra <Wilco.Dijkstra@arm.com>
Date: Wed, 21 Mar 2018 17:54:22 +0000
Subject: [PATCH 5/7] sin/cos slow paths: remove unused slowpath functions

Remove all unused slowpath functions.

ChangeLog:
2018-03-20  Wilco Dijkstra  <wdijkstr@arm.com>

	* sysdeps/ieee754/dbl-64/s_sin.c (TAYLOR_SLOW): Remove.
	(do_cos_slow): Likewise.
	(do_sin_slow): Likewise.
	(reduce_and_compute): Likewise.
	(slow): Likewise.
	(slow1): Likewise.
	(slow2): Likewise.
	(sloww): Likewise.
	(sloww1): Likewise.
	(sloww2): Likewise.
	(bslow): Likewise.
	(bslow1): Likewise.
	(bslow2): Likewise.
	(cslow2): Likewise.
---
 sysdeps/ieee754/dbl-64/s_sin.c | 447 +----------------------------------------
 1 file changed, 3 insertions(+), 444 deletions(-)

diff --git a/sysdeps/ieee754/dbl-64/s_sin.c b/sysdeps/ieee754/dbl-64/s_sin.c
index 099a8a128f9..7a55636889f 100644
--- a/sysdeps/ieee754/dbl-64/s_sin.c
+++ b/sysdeps/ieee754/dbl-64/s_sin.c
@@ -22,22 +22,11 @@
 /*                                                                          */
 /* FUNCTIONS: usin                                                          */
 /*            ucos                                                          */
-/*            slow                                                          */
-/*            slow1                                                         */
-/*            slow2                                                         */
-/*            sloww                                                         */
-/*            sloww1                                                        */
-/*            sloww2                                                        */
-/*            bsloww                                                        */
-/*            bsloww1                                                       */
-/*            bsloww2                                                       */
-/*            cslow2                                                        */
 /* FILES NEEDED: dla.h endian.h mpa.h mydefs.h  usncs.h                     */
-/*               branred.c sincos32.c dosincos.c mpa.c                      */
-/*               sincos.tbl                                                 */
+/*		 branred.c sincos.tbl					    */
 /*                                                                          */
-/* An ultimate sin and  routine. Given an IEEE double machine number x       */
-/* it computes the correctly rounded (to nearest) value of sin(x) or cos(x) */
+/* An ultimate sin and cos routine. Given an IEEE double machine number x   */
+/* it computes sin(x) or cos(x) with ~0.55 ULP.				    */
 /* Assumption: Machine arithmetic operations are performed in               */
 /* round to nearest mode of IEEE 754 standard.                              */
 /*                                                                          */
@@ -74,29 +63,6 @@
   res;									      \
 })
 
-/* This is again a variation of the Taylor series expansion with the term
-   x^3/3! expanded into the following for better accuracy:
-
-   bb * x ^ 3 + 3 * aa * x * x1 * x2 + aa * x1 ^ 3 + aa * x2 ^ 3
-
-   The correction term is dx and bb + aa = -1/3!
-   */
-#define TAYLOR_SLOW(x0, dx, cor) \
-({									      \
-  static const double th2_36 = 206158430208.0;	/*    1.5*2**37   */	      \
-  double xx = (x0) * (x0);						      \
-  double x1 = ((x0) + th2_36) - th2_36;					      \
-  double y = aa * x1 * x1 * x1;						      \
-  double r = (x0) + y;							      \
-  double x2 = ((x0) - x1) + (dx);					      \
-  double t = (((POLYNOMIAL2 (xx) + bb) * xx + 3.0 * aa * x1 * x2)	      \
-	      * (x0)  + aa * x2 * x2 * x2 + (dx));			      \
-  t = (((x0) - r) + y) + t;						      \
-  double res = r + t;							      \
-  (cor) = (r - res) + t;						      \
-  res;									      \
-})
-
 #define SINCOS_TABLE_LOOKUP(u, sn, ssn, cs, ccs) \
 ({									      \
   int4 k = u.i[LOW_HALF] << 2;						      \
@@ -123,23 +89,7 @@ static const double
   cs4 = -4.16666666666664434524222570944589E-02,
   cs6 = 1.38888874007937613028114285595617E-03;
 
-static const double t22 = 0x1.8p22;
-
-void __dubsin (double x, double dx, double w[]);
-void __docos (double x, double dx, double w[]);
-double __mpsin (double x, double dx, bool reduce_range);
-double __mpcos (double x, double dx, bool reduce_range);
-static double slow (double x);
-static double slow1 (double x);
-static double slow2 (double x);
-static double sloww (double x, double dx, double orig, bool shift_quadrant);
-static double sloww1 (double x, double dx, double orig, bool shift_quadrant);
-static double sloww2 (double x, double dx, double orig, int n);
-static double bsloww (double x, double dx, double orig, int n);
-static double bsloww1 (double x, double dx, double orig, int n);
-static double bsloww2 (double x, double dx, double orig, int n);
 int __branred (double x, double *a, double *aa);
-static double cslow2 (double x);
 
 /* Given a number partitioned into X and DX, this function computes the cosine
    of the number by combining the sin and cos of X (as computed by a variation
@@ -166,40 +116,6 @@ do_cos (double x, double dx)
   return cs + cor;
 }
 
-/* A more precise variant of DO_COS.  EPS is the adjustment to the correction
-   COR.  */
-static inline double
-__always_inline
-do_cos_slow (double x, double dx, double eps, double *corp)
-{
-  mynumber u;
-
-  if (x <= 0)
-    dx = -dx;
-
-  u.x = big + fabs (x);
-  x = fabs (x) - (u.x - big);
-
-  double xx, y, x1, x2, e1, e2, res, cor;
-  double s, sn, ssn, c, cs, ccs;
-  xx = x * x;
-  s = x * xx * (sn3 + xx * sn5);
-  c = x * dx + xx * (cs2 + xx * (cs4 + xx * cs6));
-  SINCOS_TABLE_LOOKUP (u, sn, ssn, cs, ccs);
-  x1 = (x + t22) - t22;
-  x2 = (x - x1) + dx;
-  e1 = (sn + t22) - t22;
-  e2 = (sn - e1) + ssn;
-  cor = (ccs - cs * c - e1 * x2 - e2 * x) - sn * s;
-  y = cs - e1 * x1;
-  cor = cor + ((cs - y) - e1 * x1);
-  res = y + cor;
-  cor = (y - res) + cor;
-  cor = 1.0005 * cor + __copysign (eps, cor);
-  *corp = cor;
-  return res;
-}
-
 /* Given a number partitioned into X and DX, this function computes the sine of
    the number by combining the sin and cos of X (as computed by a variation of
    the Taylor series) with the values looked up from the sin/cos table to get
@@ -224,70 +140,6 @@ do_sin (double x, double dx)
   return sn + cor;
 }
 
-/* A more precise variant of DO_SIN.  EPS is the adjustment to the correction
-   COR.  */
-static inline double
-__always_inline
-do_sin_slow (double x, double dx, double eps, double *corp)
-{
-  mynumber u;
-
-  if (x <= 0)
-    dx = -dx;
-  u.x = big + fabs (x);
-  x = fabs (x) - (u.x - big);
-
-  double xx, y, x1, x2, c1, c2, res, cor;
-  double s, sn, ssn, c, cs, ccs;
-  xx = x * x;
-  s = x * xx * (sn3 + xx * sn5);
-  c = xx * (cs2 + xx * (cs4 + xx * cs6));
-  SINCOS_TABLE_LOOKUP (u, sn, ssn, cs, ccs);
-  x1 = (x + t22) - t22;
-  x2 = (x - x1) + dx;
-  c1 = (cs + t22) - t22;
-  c2 = (cs - c1) + ccs;
-  cor = (ssn + s * ccs + cs * s + c2 * x + c1 * x2 - sn * x * dx) - sn * c;
-  y = sn + c1 * x1;
-  cor = cor + ((sn - y) + c1 * x1);
-  res = y + cor;
-  cor = (y - res) + cor;
-  cor = 1.0005 * cor + __copysign (eps, cor);
-  *corp = cor;
-  return res;
-}
-
-/* Reduce range of X and compute sin of a + da. When SHIFT_QUADRANT is true,
-   the routine returns the cosine of a + da by rotating the quadrant once and
-   computing the sine of the result.  */
-static inline double
-__always_inline
-reduce_and_compute (double x, bool shift_quadrant)
-{
-  double retval = 0, a, da;
-  unsigned int n = __branred (x, &a, &da);
-  int4 k = (n + shift_quadrant) % 4;
-  switch (k)
-    {
-    case 2:
-      a = -a;
-      da = -da;
-      /* Fall through.  */
-    case 0:
-      if (a * a < 0.01588)
-	retval = bsloww (a, da, x, n);
-      else
-	retval = bsloww1 (a, da, x, n);
-      break;
-
-    case 1:
-    case 3:
-      retval = bsloww2 (a, da, x, n);
-      break;
-    }
-  return retval;
-}
-
 /* Reduce range of x to within PI/2 with abs (x) < 105414350.  The high part
    is written to *a, the low part to *da.  Range reduction is accurate to 136
    bits so that when x is large and *a very close to zero, all 53 bits of *a
@@ -508,299 +360,6 @@ __cos (double x)
   return retval;
 }
 
-/************************************************************************/
-/*  Routine compute sin(x) for  2^-26 < |x|< 0.25 by  Taylor with more   */
-/* precision  and if still doesn't accurate enough by mpsin   or dubsin */
-/************************************************************************/
-
-static inline double
-__always_inline
-slow (double x)
-{
-  double res, cor, w[2];
-  res = TAYLOR_SLOW (x, 0, cor);
-  if (res == res + 1.0007 * cor)
-    return res;
-
-  __dubsin (fabs (x), 0, w);
-  if (w[0] == w[0] + 1.000000001 * w[1])
-    return __copysign (w[0], x);
-
-  return __copysign (__mpsin (fabs (x), 0, false), x);
-}
-
-/*******************************************************************************/
-/* Routine compute sin(x) for 0.25<|x|< 0.855469 by __sincostab.tbl and Taylor */
-/* and if result still doesn't accurate enough by mpsin   or dubsin            */
-/*******************************************************************************/
-
-static inline double
-__always_inline
-slow1 (double x)
-{
-  double w[2], cor, res;
-
-  res = do_sin_slow (x, 0, 0, &cor);
-  if (res == res + cor)
-    return res;
-
-  __dubsin (fabs (x), 0, w);
-  if (w[0] == w[0] + 1.000000005 * w[1])
-    return w[0];
-
-  return __mpsin (fabs (x), 0, false);
-}
-
-/**************************************************************************/
-/*  Routine compute sin(x) for   0.855469  <|x|<2.426265  by  __sincostab.tbl  */
-/* and if result still doesn't accurate enough by mpsin   or dubsin       */
-/**************************************************************************/
-static inline double
-__always_inline
-slow2 (double x)
-{
-  double w[2], y, y1, y2, cor, res;
-
-  double t = hp0 - fabs (x);
-  res = do_cos_slow (t, hp1, 0, &cor);
-  if (res == res + cor)
-    return res;
-
-  y = fabs (x) - hp0;
-  y1 = y - hp1;
-  y2 = (y - y1) - hp1;
-  __docos (y1, y2, w);
-  if (w[0] == w[0] + 1.000000005 * w[1])
-    return w[0];
-
-  return __mpsin (fabs (x), 0, false);
-}
-
-/* Compute sin(x + dx) where X is small enough to use Taylor series around zero
-   and (x + dx) in the first or third quarter of the unit circle.  ORIG is the
-   original value of X for computing error of the result.  If the result is not
-   accurate enough, the routine calls mpsin or dubsin.  SHIFT_QUADRANT rotates
-   the unit circle by 1 to compute the cosine instead of sine.  */
-static inline double
-__always_inline
-sloww (double x, double dx, double orig, bool shift_quadrant)
-{
-  double y, t, res, cor, w[2], a, da, xn;
-  mynumber v;
-  int4 n;
-  res = TAYLOR_SLOW (x, dx, cor);
-
-  double eps = fabs (orig) * 3.1e-30;
-
-  cor = 1.0005 * cor + __copysign (eps, cor);
-
-  if (res == res + cor)
-    return res;
-
-  a = fabs (x);
-  da = (x > 0) ? dx : -dx;
-  __dubsin (a, da, w);
-  eps = fabs (orig) * 1.1e-30;
-  cor = 1.000000001 * w[1] + __copysign (eps, w[1]);
-
-  if (w[0] == w[0] + cor)
-    return __copysign (w[0], x);
-
-  t = (orig * hpinv + toint);
-  xn = t - toint;
-  v.x = t;
-  y = (orig - xn * mp1) - xn * mp2;
-  n = (v.i[LOW_HALF] + shift_quadrant) & 3;
-  da = xn * pp3;
-  t = y - da;
-  da = (y - t) - da;
-  y = xn * pp4;
-  a = t - y;
-  da = ((t - a) - y) + da;
-
-  if (n & 2)
-    {
-      a = -a;
-      da = -da;
-    }
-  x = fabs (a);
-  dx = (a > 0) ? da : -da;
-  __dubsin (x, dx, w);
-  eps = fabs (orig) * 1.1e-40;
-  cor = 1.000000001 * w[1] + __copysign (eps, w[1]);
-
-  if (w[0] == w[0] + cor)
-    return __copysign (w[0], a);
-
-  return shift_quadrant ? __mpcos (orig, 0, true) : __mpsin (orig, 0, true);
-}
-
-/* Compute sin(x + dx) where X is in the first or third quarter of the unit
-   circle.  ORIG is the original value of X for computing error of the result.
-   If the result is not accurate enough, the routine calls mpsin or dubsin.
-   SHIFT_QUADRANT rotates the unit circle by 1 to compute the cosine instead of
-   sine.  */
-static inline double
-__always_inline
-sloww1 (double x, double dx, double orig, bool shift_quadrant)
-{
-  double w[2], cor, res;
-
-  res = do_sin_slow (x, dx, 3.1e-30 * fabs (orig), &cor);
-
-  if (res == res + cor)
-    return __copysign (res, x);
-
-  dx = (x > 0 ? dx : -dx);
-  __dubsin (fabs (x), dx, w);
-
-  double eps = 1.1e-30 * fabs (orig);
-  cor = 1.000000005 * w[1] + __copysign (eps, w[1]);
-
-  if (w[0] == w[0] + cor)
-    return __copysign (w[0], x);
-
-  return shift_quadrant ? __mpcos (orig, 0, true) : __mpsin (orig, 0, true);
-}
-
-/***************************************************************************/
-/*  Routine compute sin(x+dx)   (Double-Length number) where x in second or */
-/*  fourth quarter of unit circle.Routine receive also  the  original value */
-/* and quarter(n= 1or 3)of x for computing error of result.And if result not*/
-/* accurate enough routine calls  mpsin1   or dubsin                       */
-/***************************************************************************/
-
-static inline double
-__always_inline
-sloww2 (double x, double dx, double orig, int n)
-{
-  double w[2], cor, res;
-
-  res = do_cos_slow (x, dx, 3.1e-30 * fabs (orig), &cor);
-
-  if (res == res + cor)
-    return (n & 2) ? -res : res;
-
-  dx = x > 0 ? dx : -dx;
-  __docos (fabs (x), dx, w);
-
-  double eps = 1.1e-30 * fabs (orig);
-  cor = 1.000000005 * w[1] + __copysign (eps, w[1]);
-
-  if (w[0] == w[0] + cor)
-    return (n & 2) ? -w[0] : w[0];
-
-  return (n & 1) ? __mpsin (orig, 0, true) : __mpcos (orig, 0, true);
-}
-
-/***************************************************************************/
-/*  Routine compute sin(x+dx) or cos(x+dx) (Double-Length number) where x   */
-/* is small enough to use Taylor series around zero and   (x+dx)            */
-/* in first or third quarter of unit circle.Routine receive also            */
-/* (right argument) the  original   value of x for computing error of      */
-/* result.And if result not accurate enough routine calls other routines    */
-/***************************************************************************/
-
-static inline double
-__always_inline
-bsloww (double x, double dx, double orig, int n)
-{
-  double res, cor, w[2], a, da;
-
-  res = TAYLOR_SLOW (x, dx, cor);
-  cor = 1.0005 * cor + __copysign (1.1e-24, cor);
-  if (res == res + cor)
-    return res;
-
-  a = fabs (x);
-  da = (x > 0) ? dx : -dx;
-  __dubsin (a, da, w);
-  cor = 1.000000001 * w[1] + __copysign (1.1e-24, w[1]);
-
-  if (w[0] == w[0] + cor)
-    return __copysign (w[0], x);
-
-  return (n & 1) ? __mpcos (orig, 0, true) : __mpsin (orig, 0, true);
-}
-
-/***************************************************************************/
-/*  Routine compute sin(x+dx)  or cos(x+dx) (Double-Length number) where x  */
-/* in first or third quarter of unit circle.Routine receive also            */
-/* (right argument) the original  value of x for computing error of result.*/
-/* And if result not  accurate enough routine calls  other routines         */
-/***************************************************************************/
-
-static inline double
-__always_inline
-bsloww1 (double x, double dx, double orig, int n)
-{
-  double w[2], cor, res;
-
-  res = do_sin_slow (x, dx, 1.1e-24, &cor);
-  if (res == res + cor)
-    return (x > 0) ? res : -res;
-
-  dx = (x > 0) ? dx : -dx;
-  __dubsin (fabs (x), dx, w);
-
-  cor = 1.000000005 * w[1] + __copysign (1.1e-24, w[1]);
-
-  if (w[0] == w[0] + cor)
-    return __copysign (w[0], x);
-
-  return (n & 1) ? __mpcos (orig, 0, true) : __mpsin (orig, 0, true);
-}
-
-/***************************************************************************/
-/*  Routine compute sin(x+dx)  or cos(x+dx) (Double-Length number) where x  */
-/* in second or fourth quarter of unit circle.Routine receive also  the     */
-/* original value and quarter(n= 1or 3)of x for computing error of result.  */
-/* And if result not accurate enough routine calls  other routines          */
-/***************************************************************************/
-
-static inline double
-__always_inline
-bsloww2 (double x, double dx, double orig, int n)
-{
-  double w[2], cor, res;
-
-  res = do_cos_slow (x, dx, 1.1e-24, &cor);
-  if (res == res + cor)
-    return (n & 2) ? -res : res;
-
-  dx = (x > 0) ? dx : -dx;
-  __docos (fabs (x), dx, w);
-
-  cor = 1.000000005 * w[1] + __copysign (1.1e-24, w[1]);
-
-  if (w[0] == w[0] + cor)
-    return (n & 2) ? -w[0] : w[0];
-
-  return (n & 1) ? __mpsin (orig, 0, true) : __mpcos (orig, 0, true);
-}
-
-/************************************************************************/
-/*  Routine compute cos(x) for  2^-27 < |x|< 0.25 by  Taylor with more   */
-/* precision  and if still doesn't accurate enough by mpcos   or docos  */
-/************************************************************************/
-
-static inline double
-__always_inline
-cslow2 (double x)
-{
-  double w[2], cor, res;
-
-  res = do_cos_slow (x, 0, 0, &cor);
-  if (res == res + cor)
-    return res;
-
-  __docos (fabs (x), 0, w);
-  if (w[0] == w[0] + 1.000000005 * w[1])
-    return w[0];
-
-  return __mpcos (x, 0, false);
-}
-
 #ifndef __cos
 libm_alias_double (__cos, cos)
 #endif
-- 
2.16.2

