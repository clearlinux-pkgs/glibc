--- glibc-2.35/malloc/malloc.c~	2022-03-09 15:04:18.000000000 +0000
+++ glibc-2.35/malloc/malloc.c	2022-05-23 19:38:41.326698956 +0000
@@ -2041,6 +2041,24 @@
 #endif
 }
 
+static inline void
+madvise_populate (void *p, INTERNAL_SIZE_T size)
+{
+#if defined (MADV_POPULATE_WRITE)
+  /* Linux requires the input address to be page-aligned, and unaligned
+     inputs happens only for initial data segment.  */
+  if (__glibc_unlikely (!PTR_IS_ALIGNED (p, GLRO (dl_pagesize))))
+    {
+      void *q = PTR_ALIGN_DOWN (p, GLRO (dl_pagesize));
+      size += PTR_DIFF (p, q);
+      p = q;
+    }
+
+  __madvise (p, size, MADV_POPULATE_WRITE);
+#endif
+}
+
+
 /* ------------------- Support for multiple arenas -------------------- */
 #include "arena.c"
 
@@ -3708,6 +3726,9 @@
 
   INTERNAL_SIZE_T csz = chunksize (p);
 
+  /* calloc users expect the memory to be cleared, so lets avoid a pile of pagefaults */
+  madvise_populate(mem, sz);
+
   /* Two optional cases in which clearing not necessary */
   if (chunk_is_mmapped (p))
     {
@@ -3730,35 +3751,8 @@
      minimally 3.  */
   d = (INTERNAL_SIZE_T *) mem;
   clearsize = csz - SIZE_SZ;
-  nclears = clearsize / sizeof (INTERNAL_SIZE_T);
-  assert (nclears >= 3);
-
-  if (nclears > 9)
-    return memset (d, 0, clearsize);
-
-  else
-    {
-      *(d + 0) = 0;
-      *(d + 1) = 0;
-      *(d + 2) = 0;
-      if (nclears > 4)
-        {
-          *(d + 3) = 0;
-          *(d + 4) = 0;
-          if (nclears > 6)
-            {
-              *(d + 5) = 0;
-              *(d + 6) = 0;
-              if (nclears > 8)
-                {
-                  *(d + 7) = 0;
-                  *(d + 8) = 0;
-                }
-            }
-        }
-    }
 
-  return mem;
+  return memset (d, 0, clearsize);
 }
 #endif /* IS_IN (libc) */
 
